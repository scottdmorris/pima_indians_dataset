# neural network with keras
from numpy import loadtxt
from keras.models import Sequential
from keras.layers import Dense

#load dataset
dataset = loadtxt('pima-indians-diabetes.csv', delimiter=',')

#split input (X) and output (Y) variables 
X = dataset[:, 0:8]
y = dataset[:,8]

# define keras model
model = Sequential()
model.add(Dense(12, input_dim=8, activation='relu')) # first layer, 12 nodes, 8 variables of data, relu activation
model.add(Dense(8, activation='relu')) # second layer, 8 nodes
model.add(Dense(1, activation='sigmoid')) # last/output layer, 1 node

# compile keras model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
# loss function for binary classification problems
# measuring for accuracy

# fit keras model
model.fit(X, y, epochs=150, batch_size=10) # epoch = # of runs through data
# 10 batches per run thru model 

# evaluate the keras model
_, accuracy = model.evaluate(X, y)
print('Accuracy: %.2f' % (accuracy*100))

# make probability predictions with the model
predictions = model.predict(X)

# summarize the first 5 cases
for i in range(5):
	print('%s => %d (expected %d)' % (X[i].tolist(), predictions[i], y[i]))